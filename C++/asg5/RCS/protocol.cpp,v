head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2015.08.13.07.45.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.08.13.04.07.28;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.05.13.01.59.40;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.05.13.01.48.40;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: protocol.cpp,v 1.3 2015-08-12 21:07:28-07 - - $

#include <unordered_map>
#include <string>
using namespace std;

#include "protocol.h"

const unordered_map<int,string> cix_command_map {
   {int (CIX_ERROR), "CIX_ERROR"},
   {int (CIX_EXIT ), "CIX_EXIT" },
   {int (CIX_GET  ), "CIX_GET"  },
   {int (CIX_HELP ), "CIX_HELP" },
   {int (CIX_LS   ), "CIX_LS"   },
   {int (CIX_PUT  ), "CIX_PUT"  },
   {int (CIX_RM   ), "CIX_RM"   },
   {int (CIX_FILE ), "CIX_FILE" },
   {int (CIX_LSOUT), "CIX_LSOUT"},
   {int (CIX_ACK  ), "CIS_ACK"  },
   {int (CIX_NAK  ), "CIS_NAK"  },
};


void send_packet (base_socket& socket,
                  const void* buffer, size_t bufsize) {
   const char* bufptr = static_cast<const char*> (buffer);
   ssize_t ntosend = bufsize;
   do {
      ssize_t nbytes = socket.send (bufptr, ntosend);
      if (nbytes < 0) throw socket_sys_error (to_string (socket));
      bufptr += nbytes;
      ntosend -= nbytes;
   }while (ntosend > 0);
}

void recv_packet (base_socket& socket, void* buffer, size_t bufsize) {
   char* bufptr = static_cast<char*> (buffer);
   ssize_t ntorecv = bufsize;
   do {
      ssize_t nbytes = socket.recv (bufptr, ntorecv);
      if (nbytes < 0) throw socket_sys_error (to_string (socket));
      if (nbytes == 0) throw socket_error (to_string (socket)
                                           + " is closed");
      bufptr += nbytes;
      ntorecv -= nbytes;
   }while (ntorecv > 0);
}

ostream& operator<< (ostream& out, const cix_header& header) {
   const auto& itor = cix_command_map.find (header.command);
   string code = itor == cix_command_map.end() ? "?" : itor->second;
   cout << "{" << header.nbytes << "," << code << "="
        << int (header.command) << ",\"" << header.filename
        << "\"}";
   return out;
}    


string get_cix_server_host (const vector<string>& args, size_t index) {
   if (index < args.size()) return args[index];
   char* host = getenv ("CIX_SERVER_HOST");
   if (host != nullptr) return host;
   return "localhost";
}

in_port_t get_cix_server_port (const vector<string>& args,
                               size_t index) {
   string port = "-1";
   if (index < args.size()) port = args[index];
   else {
      char* envport = getenv ("CIX_SERVER_PORT");
      if (envport != nullptr) port = envport;
   }
   return stoi (port);
}
     
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.2 2015-05-12 18:59:40-07 - - $
a65 16


list<string> split (const string& line, const string& delimiters) {
   list<string> words;
   size_t end = 0;
   // Loop over the string, splitting out words, and for each word
   // thus found, append it to the output list<string>.
   for (;;) {
      size_t start = line.find_first_not_of (delimiters, end);
      if (start == string::npos) break;
      end = line.find_first_of (delimiters, start);
      words.push_back (line.substr (start, end - start));
   }
   return words;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.1 2015-05-12 18:48:40-07 - - $
d66 16
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: protocol.cpp,v 1.1 2015-05-12 18:48:18-07 - - $
d50 1
a50 1
   const auto& itor = cix_command_map.find (header.cix_command);
d52 2
a53 2
   cout << "{" << header.cix_nbytes << "," << code << "="
        << int (header.cix_command) << ",\"" << header.cix_filename
@
