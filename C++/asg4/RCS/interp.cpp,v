head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2015.08.04.05.00.53;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.08.04.04.31.56;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.08.04.00.30.31;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.08.03.08.35.48;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.08.03.06.21.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.08.03.03.18.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.08.02.10.54.36;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.16.23.57.30;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.16.23.47.51;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// Author: Bradley Bernard, bmbernar@@ucsc.edu
// $Id: interp.cpp,v 1.8 2015-08-03 21:31:56-07 - - $

#include <memory>
#include <string>
#include <vector>
using namespace std;

#include <GL/freeglut.h>

#include "debug.h"
#include "interp.h"
#include "shape.h"
#include "util.h"

static unordered_map<string,void*> fontcode {
   {"Fixed-8x13"    , GLUT_BITMAP_8_BY_13       },
   {"Fixed-9x15"    , GLUT_BITMAP_9_BY_15       },
   {"Helvetica-10"  , GLUT_BITMAP_HELVETICA_10  },
   {"Helvetica-12"  , GLUT_BITMAP_HELVETICA_12  },
   {"Helvetica-18"  , GLUT_BITMAP_HELVETICA_18  },
   {"Times-Roman-10", GLUT_BITMAP_TIMES_ROMAN_10},
   {"Times-Roman-24", GLUT_BITMAP_TIMES_ROMAN_24},
};

unordered_map<string,interpreter::interpreterfn>
interpreter::interp_map {
   {"define" , &interpreter::do_define },
   {"draw"   , &interpreter::do_draw   },
   {"border" , &interpreter::do_border },
   {"moveby" , &interpreter::do_moveby },
};

unordered_map<string,interpreter::factoryfn>
interpreter::factory_map {
   {"text"     , &interpreter::make_text     },
   {"ellipse"  , &interpreter::make_ellipse  },
   {"circle"   , &interpreter::make_circle   },
   {"polygon"  , &interpreter::make_polygon  },
   {"rectangle", &interpreter::make_rectangle},
   {"square"   , &interpreter::make_square   },
   {"diamond"  , &interpreter::make_diamond  },
   {"triangle" , &interpreter::make_triangle },
   {"equilateral", &interpreter::make_equilateral },
};

interpreter::shape_map interpreter::objmap;

interpreter::~interpreter() {
   for (const auto& itor: objmap) {
      cout << "objmap[" << itor.first << "] = "
           << *itor.second << endl;
   }
}

void interpreter::interpret (const parameters& params) {
   DEBUGF ('i', params);
   param begin = params.cbegin();
   string command = *begin;
   auto itor = interp_map.find (command);
   if (itor == interp_map.end()) throw runtime_error ("syntax error");
   interpreterfn func = itor->second;
   func (++begin, params.cend());
}

void interpreter::do_define (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   string name = *begin;
   objmap.emplace (name, make_shape (++begin, end));
}


void interpreter::do_draw (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if (end - begin != 4) throw runtime_error ("syntax error");
   string name = begin[1];
   shape_map::const_iterator itor = objmap.find (name);
   if (itor == objmap.end()) {
      throw runtime_error (name + ": no such shape");
   }
   rgbcolor color {begin[0]};
   vertex where {from_string<GLfloat> (begin[2]),
                 from_string<GLfloat> (begin[3])};
   window::push_back(object(itor->second, where, color));
}

void interpreter::do_border(param begin, param end) {
   DEBUGF ('f', range(begin, end));
   if(end - begin != 2) 
      throw runtime_error{"border: expects two arguments"};
   window::selected_color = rgbcolor{*begin};
   begin++;
   window::selected_border = stoi(*begin);
}

void interpreter::do_moveby(param begin, param end) {
   DEBUGF ('f', range(begin, end));;
   if(end - begin != 1) 
      throw runtime_error{"moveby: expected one param"};
   window::selected_move = stoi(*begin);
}

shape_ptr interpreter::make_shape (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   string type = *begin++;
   auto itor = factory_map.find(type);
   if (itor == factory_map.end()) {
      throw runtime_error (type + ": no such shape");
   }
   factoryfn func = itor->second;
   return func (begin, end);
}

shape_ptr interpreter::make_text (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if(end - begin < 2) 
      throw runtime_error{"text: needs at least two params"};
   auto itor = fontcode.find(*begin++);
   if(itor == fontcode.end())
      throw runtime_error(*begin + ": invalid font");
   void* bitmap_font = itor->second;
   string input {};
   while(begin != end)
      input += (input == "" ? "" : " " ) + *begin++;
   return make_shared<text> (bitmap_font, input);
}

shape_ptr interpreter::make_ellipse (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if(end - begin != 2)
      throw runtime_error{"ellipse: only takes two params"};
   return make_shared<ellipse> 
          (GLfloat(stof(begin[0])), GLfloat(stof(begin[1])));
}

shape_ptr interpreter::make_circle (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if(end - begin != 1)
      throw runtime_error{"circle: only takes one param"};
   return make_shared<circle> (GLfloat(stof(begin[0])));
}

shape_ptr interpreter::make_polygon (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   vertex_list vertices {};
   while(begin != end) {
      vertices.push_back({GLfloat(stof(*begin++)),
         GLfloat(stof(*begin++))});
   }
   return make_shared<polygon> (vertices);
}

shape_ptr interpreter::make_rectangle (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if(end - begin != 2) 
      throw runtime_error{"rectangle: only takes two params"};
   return make_shared<rectangle> 
      (GLfloat(stof(begin[0])), GLfloat(stof(begin[1])));
}

shape_ptr interpreter::make_square (param begin, param end) {
   DEBUGF ('f', range (begin, end));
   if(end - begin != 1) 
      throw runtime_error{"square: only takes one param"};
   return make_shared<square> (GLfloat(stof(begin[0])));
}

shape_ptr interpreter::make_diamond (param begin, param end) {
   DEBUGF ('f', range(begin, end));
   if(end - begin != 2)
      throw runtime_error{"diamond: only takes two params"};
   return make_shared<diamond> 
      (GLfloat(stof(begin[0])), GLfloat(stof(begin[1])));
}

shape_ptr interpreter::make_triangle (param begin, param end) {
   DEBUGF ('f', range(begin, end));
   vertex_list vertices {};
   if(end - begin != 6)
      throw runtime_error{"triangle: only takes six params"};
   while(begin != end) {
      vertices.push_back({GLfloat(stof(*begin++)),
         GLfloat(stof(*begin++))});
   }
   return make_shared<triangle> (vertices);
}

shape_ptr interpreter::make_equilateral (param begin, param end) {
   DEBUGF ('f', range(begin, end));
   if(end - begin != 1)
      throw runtime_error{"equilateral: only takes one param"};
   return make_shared<equilateral> (GLfloat(stof(begin[0])));
}
@


1.8
log
@-
@
text
@d1 2
a2 1
// $Id: interp.cpp,v 1.7 2015-08-03 17:30:31-07 - - $
a115 6
   //int params = 0;
   /*param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params < 2)*/
a129 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params != 2)*/
a137 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params > 1)*/
a154 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params != 2)*/
a162 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params > 1)*/
a169 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params != 2)*/ 
a178 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params != 6)*/
a189 6
   /*int params = 0;
   param tmp = begin;
   while(tmp != end) {
      tmp++; params++;
   }
   if(params > 1)*/
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.6 2015-08-03 01:35:48-07 - - $
d90 2
a91 1
   window::selected_color = rgbcolor{*begin++};
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.5 2015-08-02 23:21:52-07 - - $
d29 2
d86 15
d114 2
a115 2
   int params = 0;
   param tmp = begin;
d119 2
a120 1
   if(params < 2) 
d134 1
a134 1
   int params = 0;
d139 2
a140 1
   if(params != 2) 
d148 1
a148 1
   int params = 0;
d153 2
a154 1
   if(params > 1) 
d171 1
a171 1
   int params = 0;
d176 2
a177 1
   if(params != 2) 
d185 1
a185 1
   int params = 0;
d190 2
a191 1
   if(params > 1) 
d198 1
a198 1
   int params = 0;
d203 2
a204 1
   if(params != 2) 
d213 1
a213 1
   int params = 0;
d218 2
a219 1
   if(params != 6) 
d230 1
a230 1
   int params = 0;
d235 2
a236 1
   if(params > 1) 
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.4 2015-08-02 20:18:54-07 - - $
d97 7
d116 7
d134 2
a135 1
   if(params > 1) throw runtime_error{"circle: only takes one param"};
d151 7
d169 2
a170 1
   if(params > 1) throw runtime_error{"square: only takes one param"};
d176 7
d190 7
d206 7
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.3 2015-08-02 03:54:36-07 - - $
d15 10
d97 8
a104 1
   return make_shared<text> (nullptr, string());
d115 6
d142 6
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.2 2015-07-16 16:57:30-07 - - $
d29 3
a71 1
   //itor->second->draw (where, color);
d92 2
a93 1
   return make_shared<ellipse> (GLfloat(stof(begin[0])), GLfloat(stof(begin[1])));
d98 1
a98 1
   return make_shared<circle> (GLfloat());
d103 6
a108 1
   return make_shared<polygon> (vertex_list());
d113 2
a114 1
   return make_shared<rectangle> (GLfloat(), GLfloat());
d119 7
a125 1
   return make_shared<square> (GLfloat());
d128 14
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.1 2015-07-16 16:47:51-07 - - $
d68 2
a69 1
   itor->second->draw (where, color);
d90 1
a90 1
   return make_shared<ellipse> (GLfloat(), GLfloat());
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: interp.cpp,v 1.1 2015-07-16 16:39:04-07 - - $
d59 2
a60 2
   if (end - begin != 3) throw runtime_error ("syntax error");
   string name = begin[0];
d65 3
a67 3
   vertex where {from_string<GLfloat> (begin[1]),
                 from_string<GLfloat> (begin[2])};
   rgbcolor color {begin[3]};
@
