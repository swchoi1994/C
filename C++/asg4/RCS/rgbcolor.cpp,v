head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2015.08.04.05.00.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.08.03.06.21.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.16.23.47.51;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// Author: Bradley Bernard, bmbernar@@ucsc.edu
// $Id: rgbcolor.cpp,v 1.2 2015-08-02 23:21:52-07 - - $

#include <cctype>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <unordered_map>
#include <vector>
using namespace std;

#include "rgbcolor.h"
#include "colors.cppgen"

rgbcolor::rgbcolor (const string& name) {
   auto entry = color_names.find (name);
   if (entry != color_names.end()) {
      *this = entry->second;
   }else {
      string err {"rgbcolor::rgbcolor(" + name + ")"};
      if (name.size() != 8) throw runtime_error{err};
      string prefix = name.substr (0, 2);
      if (not (prefix == "0x" or prefix == "0X")) 
         throw runtime_error{err};
      for (size_t index = 0; index < 3; ++index) {
         string hex = name.substr (index * 2 + 2, 2);
         for (char digit: hex) if (not isxdigit(digit)) 
                                  throw runtime_error{err};
         ubvec[index] = stoul (hex, nullptr, 16);
      }
   }
}

rgbcolor::operator string() const {
   ostringstream result;
   result << "0x"
          << hex << setiosflags (ios::uppercase) << setfill ('0')
          << setw(2) << static_cast<unsigned> (red)
          << setw(2) << static_cast<unsigned> (green)
          << setw(2) << static_cast<unsigned> (blue);
   return result.str();
}

ostream& operator<< (ostream& out, const rgbcolor& color) {
   out << string (color);
   return out;
}

@


1.2
log
@-
@
text
@d1 2
a2 1
// $Id: rgbcolor.cpp,v 1.1 2015-07-16 16:47:51-07 - - $
a13 1

a21 1
      //invalid_argument error ("rgbcolor::rgbcolor(" + name + ")");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: rgbcolor.cpp,v 1.1 2015-07-16 16:39:04-07 - - $
d21 3
a23 2
      invalid_argument error ("rgbcolor::rgbcolor(" + name + ")");
      if (name.size() != 8) throw error;
d25 2
a26 1
      if (not (prefix == "0x" or prefix == "0X")) throw error;
d29 2
a30 1
         for (char digit: hex) if (not isxdigit(digit)) throw error;
@
